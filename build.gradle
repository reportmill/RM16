import java.text.SimpleDateFormat

plugins {
    id 'application'
    id 'maven-publish'
}

group 'com.reportmill'
version new SimpleDateFormat("yyyy.MM").format(new Date())

sourceSets.main.java.srcDirs = ['src']
sourceSets.main.resources.srcDirs = ['src']

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {

    // Jitpack makes builds from GitHub repos
    maven { url 'https://jitpack.io' }
}

dependencies {

    // If Local SnapKit project, use that, otherwise use latest GitHub repo
    if (findProject(':SnapKit') != null) { println 'Using local SnapKit project'
        implementation project(':SnapKit') }
    else { println 'Using latest SnapKit GitHub repo'
        implementation 'com.github.reportmill:SnapKit:master-SNAPSHOT'  }

    // If Local SnapPDF project, use that, otherwise use latest GitHub repo
    if (findProject(':SnapPDF') != null) { println 'Using local SnapPDF project'
        implementation project(':SnapPDF') }
    else { println 'Using latest SnapPDF GitHub repo'
        implementation 'com.github.reportmill:SnapPDF:master-SNAPSHOT'  }

    // For Excel generation
    implementation files('lib/poi-3.7.jar')

    // For spelling
    implementation files('lib/spell.jar')

    // So we can get jars
    //testImplementation project(':CJDom')
    //testImplementation project(':SnapCJ')
}

mainClassName = 'com.reportmill.app.App'

/**
 * Custom task to build jar that includes all dependencies.
 */
task buildFullJar(type: Jar) {
    archiveBaseName = 'ReportMill16'
    manifest {
        attributes(
            'Main-Class': 'com.reportmill.app.App',
            'Application-Name': 'RMStudio16',
            'Permissions': 'all-permissions'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude('**/org/**', '**/rmtests/**', '**/test/**', '**/font_metrics.properties')
    processResources {
        finalizedBy ('buildInfo')
    }
    with jar
    dependsOn build
}

task copyCJ(type: Copy) {
    from (
        "../CJDom/cjdom.js",
        "../CJDom/build/libs/CJDom-" + new SimpleDateFormat("yyyy.MM").format(new Date()) + ".jar",
        "../SnapCJ/build/libs/SnapCJ-" + new SimpleDateFormat("yyyy.MM").format(new Date()) + ".jar",
        "../SnapKit/build/libs/SnapKit-" + new SimpleDateFormat("yyyy.MM").format(new Date()) + ".jar",
    )
    into "build/libs"
    dependsOn buildFullJar

    // Declare that this task depends on the 'jar' task of CJDom, SnapCJ
    dependsOn(":CJDom:jar", ":SnapCJ:jar")
}

/**
 * Define package information.
 */
publishing {

    // Packages
    publications {

        // Standard maven package
        gpr (MavenPublication) {
            artifactId 'ReportMill16'
            artifact buildFullJar // from(components.java)
            pom.withXml {
                asNode().dependencies.dependency.each { dep -> dep.parent().remove(dep) }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/reportmill/RM16"
            credentials {
                username = System.getenv("GITHUB_USER")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

/**
 * Writes the current build date into BuildInfo.txt, e.g.: Feb-02-23 09:31.
 */
tasks.register('buildInfo') {
    doLast {

        // Create BuildInfo text (date string) and write to file
        String buildInfoText = new SimpleDateFormat("MMM-dd-yy HH:mm").format(new Date());
        String buildInfoFilePathStr = buildDir.getAbsolutePath() + '/resources/main/com/reportmill/BuildInfo.txt';
        java.nio.file.Path buildInfoFilePath = java.nio.file.Paths.get(buildInfoFilePathStr);
        java.nio.file.Files.write(buildInfoFilePath, buildInfoText.getBytes());

//        exec { workingDir '.', executable "date", args "+%b-%d-%y %H:%M"
//            standardOutput new FileOutputStream(buildInfoFilePathStr) }
    }
}

/**
 * Disable Gradle Metadata file generation.
 */
tasks.withType(GenerateModuleMetadata) { enabled = false }
